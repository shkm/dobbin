#!/bin/bash
#
# A script managing workhorse.
set -euo pipefail

ROOT_DIR="$HOME/.dobbin"
PACKAGES_DIR="$ROOT_DIR/packages"
BIN_DIR="$ROOT_DIR/bin"
PACKAGE_LIST="$ROOT_DIR/package_list"

ensure_files_and_folders_exist() {
  local dirs=( $ROOT_DIR $PACKAGES_DIR $BIN_DIR )
  for dir in ${dirs[@]}; do
    [[ ! -d "$dir" ]] && mkdir "$dir"
  done

  if [[ ! -f "$PACKAGE_LIST" ]]; then
    touch "$PACKAGE_LIST"
  fi
}

# Runs through each line of the packages file and installs
# each package.
install_packages() {
  while read package_line; do
    install_package $package_line
  done < "$PACKAGE_LIST"
}

# Given a package line, installss it and sets up symlinks
# Args:
# package_line - A line describing the git repo address followed by files to symlink.
#                $github_repo file, [file, ...]
install_package() {
  local package_line="$@"

  while IFS=' ' read -a parsed_package; do
    local repo_url="${parsed_package[0]}"
    local repo_dir_name=$(echo $repo_url | sed -E 's/.*\/([^/.]+)[^/]*$/\1/')

    cd $PACKAGES_DIR

    if [[ ! -d $repo_dir_name ]]; then
      echo "Cloning $repo_urlâ€¦"
      git clone --quiet $repo_url
    fi

    for file in "${parsed_package[@]:1}"; do
      chmod +x "$PACKAGES_DIR/$repo_dir_name/$file"
      # TODO: auto-remove file extension in link
      echo "Linking $file"
      ln -sf "$PACKAGES_DIR/$repo_dir_name/$file" "$BIN_DIR/"
    done
  done <<< "$package_line"
}

install() {
  ensure_files_and_folders_exist
  install_packages
}

help() {
  echo "Not implemented yet."
}

main() {
  local command="${1:-}"

  if [[ -z $command ]]; then
    help
  else
    case "$command" in
      'install')
        install;;
      add)
        echo "Not implemented yet.";;
      update)
        echo "Not implemented yet.";;
      clean)
        echo "Not implemented yet.";;
      edit)
        echo "Not implemented yet.";;
      help)
        help;;
      *)
        echo "Unknown command."
        exit 1
        ;;
    esac
  fi
}

main "$@"
